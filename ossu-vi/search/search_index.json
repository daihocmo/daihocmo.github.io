{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Nothing else going on here. Just jump straight ahead to the main guide.</p>"},{"location":"guide/","title":"Gi\u00e1o tr\u00ecnh","text":""},{"location":"guide/#dua-tren-giao-trinh-cua-ossu","title":"D\u1ef1a tr\u00ean gi\u00e1o tr\u00ecnh c\u1ee7a OSSU","text":""},{"location":"guide/#curriculum","title":"Curriculum","text":"<p>Curriculum version: <code>8.0.0</code></p> <ul> <li>Prerequisites</li> <li>Intro CS</li> <li>Introduction to Programming</li> <li>Introduction to Computer Science</li> <li>Core CS</li> <li>Core programming</li> <li>Core math</li> <li>CS Tools</li> <li>Core systems</li> <li>Core theory</li> <li>Core security</li> <li>Core applications</li> <li>Core ethics</li> <li>Advanced CS</li> <li>Advanced programming</li> <li>Advanced systems</li> <li>Advanced theory</li> <li>Advanced information security</li> <li>Advanced math</li> <li>Final project</li> </ul>"},{"location":"guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Core CS assumes the student has already taken high school math, including algebra, geometry, and pre-calculus.</li> <li>Advanced CS assumes the student has already taken the entirety of Core CS and is knowledgeable enough now to decide which electives to take.</li> <li>Note that Advanced systems assumes the student has taken a basic physics course (e.g. AP Physics in high school).</li> </ul>"},{"location":"guide/#intro-cs","title":"Intro CS","text":""},{"location":"guide/#introduction-to-programming","title":"Introduction to Programming","text":"<p>If you've never written a for-loop, or don't know what a string is in programming, start here. This course is self-paced, allowing you to adjust the number of hours you spend per week to meet your needs.</p> <p>Topics covered: <code>simple programs</code> <code>simple data structures</code></p> Courses Duration Effort Prerequisites Discussion Introduction to programming 10 weeks 10 hours/week none chat"},{"location":"guide/#introduction-to-computer-science","title":"Introduction to Computer Science","text":"<p>This course will introduce you to the world of computer science. Students who have been introduced to programming, either from the courses above or through study elsewhere, should take this course for a flavor of the material to come. If you finish the course wanting more, Computer Science is likely for you!</p> <p>Topics covered: <code>computation</code> <code>imperative programming</code> <code>basic data structures and algorithms</code> <code>and more</code></p> Courses Duration Effort Prerequisites Discussion Introduction to Computer Science and Programming using Python 9 weeks 15 hours/week high school algebra chat"},{"location":"guide/#core-cs","title":"Core CS","text":"<p>All coursework under Core CS is required, unless otherwise indicated.</p>"},{"location":"guide/#core-programming","title":"Core programming","text":"<p>Topics covered: <code>functional programming</code> <code>design for testing</code> <code>program requirements</code> <code>common design patterns</code> <code>unit testing</code> <code>object-oriented design</code> <code>static typing</code> <code>dynamic typing</code> <code>ML-family languages (via Standard ML)</code> <code>Lisp-family languages (via Racket)</code> <code>Ruby</code> <code>and more</code></p> <p>Tr\u1eeb kh\u00f3a \u0111\u1ea7u ti\u00ean ra th\u00ec c\u00e1c kh\u00f3a c\u00f2n l\u1ea1i \u0111\u1ec1u c\u00f3 Vietsub. Enjoy!</p> Courses Duration Effort Prerequisites Discussion Systematic Program Design 13 weeks 8-10 hours/week none chat: part 1 / part 2 Programming Languages, Part A 5 weeks 4-8 hours/week Systematic Program Design (Hear instructor) chat Programming Languages, Part B 3 weeks 4-8 hours/week Programming Languages, Part A chat Programming Languages, Part C 3 weeks 4-8 hours/week Programming Languages, Part B chat Object-Oriented Design 4 weeks 4 hours/week Basic Java chat Design Patterns 4 weeks 4 hours/week Object-Oriented Design chat Software Architecture 4 weeks 2-5 hours/week Design Patterns chat"},{"location":"guide/#core-math","title":"Core math","text":"<p>Discrete math (Math for CS) is a prerequisite and closely related to the study of algorithms and data structures. Calculus both prepares students for discrete math and helps students develop mathematical maturity.</p> <p>Ghi ch\u00fa: Kh\u00f4ng c\u00f3 Ti\u1ebfng Vi\u1ec7t, nh\u01b0ng c\u0169ng c\u00f3 nhi\u1ec1u kh\u00f3a n\u1ed9i dung t\u01b0\u01a1ng t\u1ef1 d\u1ea1y tr\u00ean Youtube, s\u1ebd b\u1ed5 sung sau.</p> <p>Topics covered: <code>discrete mathematics</code> <code>mathematical proofs</code> <code>basic statistics</code> <code>O-notation</code> <code>discrete probability</code> <code>and more</code></p> Courses Duration Effort Notes Prerequisites Discussion Calculus 1A: Differentiation (alternative) 13 weeks 6-10 hours/week The alternate covers this and the following 2 courses high school math chat Calculus 1B: Integration 13 weeks 5-10 hours/week - Calculus 1A chat Calculus 1C: Coordinate Systems &amp; Infinite Series 6 weeks 5-10 hours/week - Calculus 1B chat Mathematics for Computer Science (alternative) 13 weeks 5 hours/week 2015/2019 solutions 2010 solutions 2005 solutions. Calculus 1C chat"},{"location":"guide/#cs-tools","title":"CS Tools","text":"<p>Understanding theory is important, but you will also be expected to create programs. There are a number of tools that are widely used to make that process easier. Learn them now to ease your future work writing programs.</p> <p>Topics covered: <code>terminals and shell scripting</code> <code>vim</code> <code>command line environments</code> <code>version control</code> <code>and more</code></p> Courses Duration Effort Prerequisites Discussion K\u00ec H\u1ecdc B\u1ecb Thi\u1ebfu C\u1ee7a Gi\u00e1o Tr\u00ecnh Khoa H\u1ecdc M\u00e1y T\u00ednh 2 weeks 12 hours/week - chat"},{"location":"guide/#core-systems","title":"Core systems","text":"<p>Topics covered: <code>procedural programming</code> <code>manual memory management</code> <code>boolean algebra</code> <code>gate logic</code> <code>memory</code> <code>computer architecture</code> <code>assembly</code> <code>machine language</code> <code>virtual machines</code> <code>high-level languages</code> <code>compilers</code> <code>operating systems</code> <code>network protocols</code> <code>and more</code></p> Courses Duration Effort Additional Text / Assignments Prerequisites Discussion Build a Modern Computer from First Principles: From Nand to Tetris (alternative) 6 weeks 7-13 hours/week - C-like programming language chat Build a Modern Computer from First Principles: Nand to Tetris Part II  6 weeks 12-18 hours/week - one of these programming languages, From Nand to Tetris Part I chat Operating Systems: Three Easy Pieces 10-12 weeks 6-10 hours/week - Nand to Tetris Part II chat Computer Networking: a Top-Down Approach 8 weeks 4\u201312 hours/week Wireshark Labs algebra, probability, basic CS chat"},{"location":"guide/#core-theory","title":"Core theory","text":"<p>Topics covered: <code>divide and conquer</code> <code>sorting and searching</code> <code>randomized algorithms</code> <code>graph search</code> <code>shortest paths</code> <code>data structures</code> <code>greedy algorithms</code> <code>minimum spanning trees</code> <code>dynamic programming</code> <code>NP-completeness</code> <code>and more</code></p> Courses Duration Effort Prerequisites Discussion Divide and Conquer, Sorting and Searching, and Randomized Algorithms 4 weeks 4-8 hours/week any programming language, Mathematics for Computer Science chat Graph Search, Shortest Paths, and Data Structures 4 weeks 4-8 hours/week Divide and Conquer, Sorting and Searching, and Randomized Algorithms chat Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming 4 weeks 4-8 hours/week Graph Search, Shortest Paths, and Data Structures chat Shortest Paths Revisited, NP-Complete Problems and What To Do About Them 4 weeks 4-8 hours/week Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming chat"},{"location":"guide/#core-security","title":"Core security","text":"<p>Topics covered <code>Confidentiality, Integrity, Availability</code> <code>Secure Design</code> <code>Defensive Programming</code> <code>Threats and Attacks</code> <code>Network Security</code> <code>Cryptography</code> <code>and more</code></p> Courses Duration Effort Prerequisites Discussion Cybersecurity Fundamentals 8 weeks 10-12 hours/week - chat Principles of Secure Coding 4 weeks 4 hours/week - chat Identifying Security Vulnerabilities 4 weeks 4 hours/week - chat <p>Choose one of the following:</p> Courses Duration Effort Prerequisites Discussion Identifying Security Vulnerabilities in C/C++Programming 4 weeks 5 hours/week - chat Exploiting and Securing Vulnerabilities in Java Applications 4 weeks 5 hours/week - chat"},{"location":"guide/#core-applications","title":"Core applications","text":"<p>Topics covered: <code>Agile methodology</code> <code>REST</code> <code>software specifications</code> <code>refactoring</code> <code>relational databases</code> <code>transaction processing</code> <code>data modeling</code> <code>neural networks</code> <code>supervised learning</code> <code>unsupervised learning</code> <code>OpenGL</code> <code>ray tracing</code> <code>and more</code></p> Courses Duration Effort Prerequisites Discussion Databases: Modeling and Theory 2 weeks 10 hours/week core programming chat Databases: Relational Databases and SQL 2 weeks 10 hours/week core programming chat Databases: Semistructured Data 2 weeks 10 hours/week core programming chat Machine Learning 11 weeks 9 hours/week Basic coding chat Computer Graphics (alternative) 6 weeks 12 hours/week C++ or Java, linear algebra chat Software Engineering: Introduction 4 weeks 8-10 hours/week Core Programming, and a sizable project chat"},{"location":"guide/#core-ethics","title":"Core ethics","text":"<p>Topics covered: <code>Social Context</code> <code>Analytical Tools</code> <code>Professional Ethics</code> <code>Intellectual Property</code> <code>Privacy and Civil Liberties</code> <code>and more</code></p> Courses Duration Effort Prerequisites Discussion Ethics, Technology and Engineering 9 weeks 2 hours/week none chat Introduction to  Intellectual Property 4 weeks 2 hours/week none chat Data Privacy Fundamentals 3 weeks 3 hours/week none chat"},{"location":"guide/#advanced-cs","title":"Advanced CS","text":"<p>After completing every required course in Core CS, students should choose a subset of courses from Advanced CS based on interest. Not every course from a subcategory needs to be taken. But students should take every course that is relevant to the field they intend to go into.</p>"},{"location":"guide/#advanced-programming","title":"Advanced programming","text":"<p>Topics covered: <code>debugging theory and practice</code> <code>goal-oriented programming</code> <code>parallel computing</code> <code>object-oriented analysis and design</code> <code>UML</code> <code>large-scale software architecture and design</code> <code>and more</code></p> Courses Duration Effort Prerequisites Parallel Programming 4 weeks 6-8 hours/week Scala programming Compilers 9 weeks 6-8 hours/week none Introduction to Haskell 14 weeks - - Learn Prolog Now! (alternative)* 12 weeks - - Software Debugging 8 weeks 6 hours/week Python, object-oriented programming Software Testing 4 weeks 6 hours/week Python, programming experience <p>(*) book by Blackburn, Bos, Striegnitz (compiled from source, redistributed under CC license)</p>"},{"location":"guide/#advanced-systems","title":"Advanced systems","text":"<p>Topics covered: <code>digital signaling</code> <code>combinational logic</code> <code>CMOS technologies</code> <code>sequential logic</code> <code>finite state machines</code> <code>processor instruction sets</code> <code>caches</code> <code>pipelining</code> <code>virtualization</code> <code>parallel processing</code> <code>virtual memory</code> <code>synchronization primitives</code> <code>system call interface</code> <code>and more</code></p> Courses Duration Effort Prerequisites Notes Computation Structures 1: Digital Circuits alternative 1 alternative 2 10 weeks 6 hours/week Nand2Tetris II Alternate links contain all 3 courses. Computation Structures 2: Computer Architecture 10 weeks 6 hours/week Computation Structures 1 Computation Structures 3: Computer Organization 10 weeks 6 hours/week Computation Structures 2"},{"location":"guide/#advanced-theory","title":"Advanced theory","text":"<p>Topics covered: <code>formal languages</code> <code>Turing machines</code> <code>computability</code> <code>event-driven concurrency</code> <code>automata</code> <code>distributed shared memory</code> <code>consensus algorithms</code> <code>state machine replication</code> <code>computational geometry theory</code> <code>propositional logic</code> <code>relational logic</code> <code>Herbrand logic</code> <code>game trees</code> <code>and more</code></p> Courses Duration Effort Prerequisites Theory of Computation (alternative) 13 weeks 10 hours/week Mathematics for Computer Science, logic, algorithms Computational Geometry 16 weeks 8 hours/week algorithms, C++ Game Theory 8 weeks 3 hours/week mathematical thinking, probability, calculus"},{"location":"guide/#advanced-information-security","title":"Advanced Information Security","text":"Courses Duration Effort Prerequisites Web Security Fundamentals 5 weeks 4-6 hours/week understanding basic web technologies Security Governance &amp; Compliance 3 weeks 3 hours/week - Digital Forensics Concepts 3 weeks 2-3 hours/week Core Security Secure Software Development: Requirements, Design, and Reuse 7 weeks 1-2 hours/week Core Programming and Core Security Secure Software Development: Implementation 7 weeks 1-2 hours/week Secure Software Development: Requirements, Design, and Reuse Secure Software Development: Verification and More Specialized Topics 7 weeks 1-2 hours/week Secure Software Development: Implementation"},{"location":"guide/#advanced-math","title":"Advanced math","text":"Courses Duration Effort Prerequisites Discussion Essence of Linear Algebra - - high school math chat Linear Algebra 14 weeks 12 hours/week corequisite: Essence of Linear Algebra chat Introduction to Numerical Methods 14 weeks 12 hours/week Linear Algebra chat Introduction to Formal Logic 10 weeks 4-8 hours/week Set Theory chat Probability 15 weeks 5-10 hours/week Differentiation and Integration chat"},{"location":"guide/#final-project","title":"Final project","text":"<p>Part of learning is doing. The assignments and exams for each course are to prepare you to use your knowledge to solve real-world problems.</p> <p>After you've completed Core CS and the parts of Advanced CS relevant to you, you should identify a problem that you can solve using the knowledge you've acquired. You can create something entirely new, or you can improve some tool/program that you use and wish were better.</p> <p>Students who would like more guidance in creating a project may choose to use a series of project oriented courses. Here is a sample of options (many more are available, at this point you should be capable of identifying a series that is interesting and relevant to you):</p> Courses Duration Effort Prerequisites Fullstack Open 12 weeks 15 hours/week programming Modern Robotics (Specialization) 26 weeks 2-5 hours/week freshman-level physics, linear algebra, calculus, linear ordinary differential equations Data Mining (Specialization) 30 weeks 2-5 hours/week machine learning Big Data (Specialization) 30 weeks 3-5 hours/week none Internet of Things (Specialization) 30 weeks 1-5 hours/week strong programming Cloud Computing (Specialization) 30 weeks 2-6 hours/week C++ programming Data Science (Specialization) 43 weeks 1-6 hours/week none Functional Programming in Scala (Specialization) 29 weeks 4-5 hours/week One year programming experience Game Design and Development with Unity 2020 (Specialization) 6 months 5 hours/week programming, interactive design"},{"location":"guide/#congratulations","title":"Congratulations","text":"<p>After completing the requirements of the curriculum above, you will have completed the equivalent of a full bachelor's degree in Computer Science. Congratulations!</p> <p>What is next for you? The possibilities are boundless and overlapping:</p> <ul> <li>Look for a job as a developer!</li> <li>Check out the readings for classic books you can read that will sharpen your skills and expand your knowledge.</li> <li>Join a local developer meetup (e.g. via meetup.com).</li> <li>Pay attention to emerging technologies in the world of software development:</li> <li>Explore the actor model through Elixir, a new functional programming language for the web based on the battle-tested Erlang Virtual Machine!</li> <li>Explore borrowing and lifetimes through Rust, a systems language which achieves memory- and thread-safety without a garbage collector!</li> <li>Explore dependent type systems through Idris, a new Haskell-inspired language with unprecedented support for type-driven development.</li> </ul> <p></p>"},{"location":"guide/#code-of-conduct","title":"Code of conduct","text":"<p>OSSU's code of conduct.</p>"},{"location":"guide/#how-to-show-your-progress","title":"How to show your progress","text":"<p>Fork the GitHub repo into your own GitHub account and put \u2705 next to the stuff you've completed as you complete it. This can serve as your kanban board and will be faster to implement than any other solution (giving you time to spend on the courses).</p>"},{"location":"guide/#team","title":"Team","text":"<ul> <li>Eric Douglas: founder of OSSU</li> <li>Josh Hanson: lead technical maintainer</li> <li>Waciuma Wanjohi: lead academic maintainer</li> <li>Contributors</li> </ul>"}]}